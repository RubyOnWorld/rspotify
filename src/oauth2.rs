//! User authorization and client credentials management.

use crate::util::generate_random_string;
use derive_builder::Builder;
use serde::{Deserialize, Serialize};

use std::env;

/// Spotify access token information.
///
/// TODO: does this need the builder pattern?
#[derive(Builder, Clone, Debug, Serialize, Deserialize)]
pub struct Token {
    #[builder(setter(into))]
    pub access_token: String,
    pub expires_in: u32,
    #[builder(setter(strip_option), default)]
    pub expires_at: Option<i64>,
    #[builder(setter(into, strip_option), default)]
    pub refresh_token: Option<String>,
    #[builder(setter(into))]
    pub scope: String,
}

/// Simple client credentials object for Spotify.
#[derive(Builder, Debug, Default, Clone, Serialize, Deserialize)]
pub struct Credentials {
    #[builder(setter(into))]
    pub id: String,
    #[builder(setter(into))]
    pub secret: String,
}

/// Structure that holds the required information for requests with OAuth.
#[derive(Builder, Debug, Default, Clone, Serialize, Deserialize)]
pub struct OAuth {
    #[builder(setter(into))]
    pub redirect_uri: String,
    /// The state is generated by default, as suggested by the OAuth2 spec:
    /// https://tools.ietf.org/html/rfc6749#section-10.12
    #[builder(setter(into), default = "generate_random_string(16)")]
    pub state: String,
    #[builder(setter(into))]
    pub scope: String,
    #[builder(setter(into, strip_option), default)]
    pub proxies: Option<String>,
}

impl CredentialsBuilder {
    /// Parses the credentials from the environment variables
    /// `RSPOTIFY_CLIENT_ID` and `RSPOTIFY_CLIENT_SECRET`. You can optionally
    /// activate the `env-file` feature in order to read these variables from
    /// a `.env` file.
    pub fn from_env() -> Self {
        #[cfg(feature = "env-file")]
        {
            dotenv::dotenv().ok();
        }
        let id = env::var("RSPOTIFY_CLIENT_ID").ok();
        let secret = env::var("RSPOTIFY_CLIENT_SECRET").ok();

        CredentialsBuilder {
            id,
            secret,
            ..Default::default()
        }
    }
}

impl OAuthBuilder {
    /// Parses the credentials from the environment variable
    /// `RSPOTIFY_REDIRECT_URI`. You can optionally activate the `env-file`
    /// feature in order to read these variables from a `.env` file.
    pub fn from_env() -> Self {
        #[cfg(feature = "env-file")]
        {
            dotenv::dotenv().ok();
        }
        let redirect_uri = env::var("RSPOTIFY_REDIRECT_URI").ok();

        OAuthBuilder {
            redirect_uri,
            ..Default::default()
        }
    }
}
